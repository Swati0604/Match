{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = timedMutationObserver;\nlet observeMutations, disconnectObserver; // fall back to polling if MutationObserver is not available\n\nif (window.MutationObserver) {\n  observeMutations = (callback, _timeout, node, config) => {\n    const observer = new MutationObserver(callback);\n    observer.observe(node, config);\n    return observer;\n  };\n\n  disconnectObserver = observer => {\n    observer.disconnect();\n  };\n} else {\n  observeMutations = (callback, timeout) => {\n    return setInterval(callback, Math.min(timeout, 500));\n  };\n\n  disconnectObserver = observer => {\n    clearInterval(observer);\n  };\n}\n\nconst defaultObserverConfig = {\n  attributes: true,\n  childList: true,\n  subtree: true\n};\n\nfunction timedMutationObserver(callback, timeout, node = document, observerConfig = defaultObserverConfig) {\n  let cancel;\n  const result = new Promise((resolve, reject) => {\n    let observer;\n    let timeoutId;\n    let success;\n\n    cancel = () => {\n      disconnectObserver(observer);\n      clearTimeout(timeoutId);\n\n      if (!success) {\n        const reason = new Error('MutationObserver cancelled');\n        reason.cancelled = true;\n        reason.timedOut = false;\n        reject(reason);\n      }\n    };\n\n    observer = observeMutations(() => {\n      if (!success && (success = callback())) {\n        cancel();\n        resolve(success);\n      }\n    }, timeout, node, observerConfig);\n    timeoutId = setTimeout(() => {\n      disconnectObserver(observer);\n      clearTimeout(timeoutId);\n\n      if (!success) {\n        const reason = new Error('MutationObserver timed out');\n        reason.cancelled = false;\n        reason.timedOut = true;\n        reject(reason);\n      }\n    }, timeout);\n  });\n  result.cancel = cancel;\n  return result;\n}","map":{"version":3,"sources":["/Users/swati/Desktop/DesignSunday/POSTS/posts/node_modules/react-scroll-manager/lib/timedMutationObserver.js"],"names":["Object","defineProperty","exports","value","default","timedMutationObserver","observeMutations","disconnectObserver","window","MutationObserver","callback","_timeout","node","config","observer","observe","disconnect","timeout","setInterval","Math","min","clearInterval","defaultObserverConfig","attributes","childList","subtree","document","observerConfig","cancel","result","Promise","resolve","reject","timeoutId","success","clearTimeout","reason","Error","cancelled","timedOut","setTimeout"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = timedMutationObserver;\nlet observeMutations, disconnectObserver; // fall back to polling if MutationObserver is not available\n\nif (window.MutationObserver) {\n  observeMutations = (callback, _timeout, node, config) => {\n    const observer = new MutationObserver(callback);\n    observer.observe(node, config);\n    return observer;\n  };\n\n  disconnectObserver = observer => {\n    observer.disconnect();\n  };\n} else {\n  observeMutations = (callback, timeout) => {\n    return setInterval(callback, Math.min(timeout, 500));\n  };\n\n  disconnectObserver = observer => {\n    clearInterval(observer);\n  };\n}\n\nconst defaultObserverConfig = {\n  attributes: true,\n  childList: true,\n  subtree: true\n};\n\nfunction timedMutationObserver(callback, timeout, node = document, observerConfig = defaultObserverConfig) {\n  let cancel;\n  const result = new Promise((resolve, reject) => {\n    let observer;\n    let timeoutId;\n    let success;\n\n    cancel = () => {\n      disconnectObserver(observer);\n      clearTimeout(timeoutId);\n\n      if (!success) {\n        const reason = new Error('MutationObserver cancelled');\n        reason.cancelled = true;\n        reason.timedOut = false;\n        reject(reason);\n      }\n    };\n\n    observer = observeMutations(() => {\n      if (!success && (success = callback())) {\n        cancel();\n        resolve(success);\n      }\n    }, timeout, node, observerConfig);\n    timeoutId = setTimeout(() => {\n      disconnectObserver(observer);\n      clearTimeout(timeoutId);\n\n      if (!success) {\n        const reason = new Error('MutationObserver timed out');\n        reason.cancelled = false;\n        reason.timedOut = true;\n        reject(reason);\n      }\n    }, timeout);\n  });\n  result.cancel = cancel;\n  return result;\n}"]},"metadata":{},"sourceType":"script"}